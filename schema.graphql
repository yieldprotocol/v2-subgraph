type YieldGlobalStats @entity {
  id: ID!
  numTrades: Int!
  numTradesOverThreshold: Int!
  numTraders: Int!
}

# we have to add "Entity" since Series can't be pluralized
type SeriesEntity @entity {
  id: ID!
  baseAsset: Asset!
  fyToken: FYToken!
  maturity: Int!
  matured: Boolean!
}

type Asset @entity {
  id: ID!
  assetId: Bytes
  name: String!
  symbol: String!
  decimals: Int!

  totalFYTokens: BigDecimal!
  fyTokens: [FYToken!]! @derivedFrom(field: "underlyingAsset")

  totalCollateral: BigDecimal!
  totalDebt: BigDecimal!
  totalTradingVolume: BigDecimal!
  totalInPools: BigDecimal!
}

type Collateral @entity {
  id: ID!
  asset: Asset!
  series: SeriesEntity!
}

type Vault @entity {
  id: ID!
  owner: Account!
  series: SeriesEntity!
  collateral: Collateral!

  debtAmount: BigDecimal!
  collateralAmount: BigDecimal!

  liquidated: Boolean
}

type Account @entity {
  id: ID!
  vaults: [Vault!]! @derivedFrom(field: "owner")
  numTrades: Int!
  balances: [AccountBalance!]! @derivedFrom(field: "account")
}

type FYToken @entity {
  id: ID!
  name: String!
  symbol: String!
  underlyingAddress: Bytes!
  underlyingAsset: Asset!
  underlyingAssetId: Bytes
  maturity: Int!
  decimals: Int!
  totalSupply: BigDecimal!
  pools: [Pool!]! @derivedFrom(field: "fyToken")

  totalInPools: BigDecimal!
}

type AccountBalance @entity {
  "id equal to ${account}-${assetAddress}"
  id: ID!
  account: Account!
  asset: Asset!
  balance: BigDecimal!
}

type Pool @entity {
  id: ID!
  base: Bytes!
  sharesToken: Bytes!
  fyToken: FYToken!
  decimals: Int!

  fyTokenReserves: BigDecimal!
  fyTokenVirtualReserves: BigDecimal!
  baseReserves: BigDecimal!
  apr: BigDecimal!
  lendAPR: BigDecimal!
  borrowAPR: BigDecimal!
  feeAPR: BigDecimal!
  fyTokenInterestAPR: BigDecimal!
  currentFYTokenPriceInBase: BigDecimal!

  poolTokens: BigDecimal!

  totalVolumeInBase: BigDecimal!
  totalTradingFeesInBase: BigDecimal!

  tvlInBase: BigDecimal!

  invariant: BigDecimal!
  initInvariant: BigDecimal!

  ts: BigInt!
  g1: BigInt!
  g2: BigInt!
  c: BigInt
  mu: BigInt
  currentSharePrice: BigDecimal

  isTv: Boolean!

  lastUpdated: Int!
  createdAtTimestamp: Int!
}

type Strategy @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  currentPool: Pool
  totalSupply: BigDecimal!
}

# Events

type Trade @entity {
  id: ID!
  timestamp: BigInt!
  pool: Pool!
  from: Bytes!
  to: Bytes!

  amountBaseToken: BigDecimal!
  amountFYToken: BigDecimal!

  feeInBase: BigDecimal!
}

type Borrow @entity {
  id: ID!
  vault: Vault!
  tx: Bytes

  debtAsset: Asset!
  collateralAsset: Asset!
  debtAmount: BigDecimal!
  collateralAmount: BigDecimal!
}

type Repay @entity {
  id: ID!
  vault: Vault!
  tx: Bytes

  debtAsset: Asset!
  collateralAsset: Asset!
  debtAmount: BigDecimal!
  collateralAmount: BigDecimal!
}

# Adding liquidity via strategy
type Liquidity @entity {
  id: ID!
  strategy: Strategy!
  from: Bytes!
  to: Bytes!
  timestamp: BigInt!
  amountStrategyTokens: BigDecimal
}
